stages:
  - build
  - code review
  - testing

docker-builder:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE_FRONTEND ./frontend/
    - docker build --pull -t $CI_REGISTRY_IMAGE_BACKEND ./backend/
    - docker push $CI_REGISTRY_IMAGE_FRONTEND
    - docker push $CI_REGISTRY_IMAGE_BACKEND
  only:
    - main
  when: manual

pylint:
  stage: code review
  before_script:
    - pip install pylint pylint-exit anybadge
  script:
    - mkdir ./pylint
    - pylint --output-format=text **/*.py | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/

test:
  stage: testing
  image: python:3.8
  script:
    - pip install pytest coverage pipenv
    - cd backend && pipenv install --system --deploy --ignore-pipfile && cd ..
    - coverage run -m pytest
    - coverage report
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml
  only:
    - merge_requests
    - main

    

